#BlueJ class context
comment0.target=Table
comment0.text=\r\n\ @author\ Natalia\ Orjuela,\ Diego\ Macana\r\n\ @version\ 18\ de\ febrero\ 20201\r\n\r\n
comment1.params=attributes
comment1.target=Table(java.lang.String[])
comment1.text=\r\n\ Constructs\ a\ new,\ empty\ table,\ with\ the\ specified\ attribute\ names.\r\n\ @param\ names,\ \r\n
comment10.params=newAttributes
comment10.target=Table\ rename(java.lang.String[])
comment10.text=\r\n\ Devuelve\ la\ tabla\ con\ unos\ atributos\ renombrados\r\n\ @return\ Table\ nuevo\r\n\ @param\ String[]\ newAttributes\ \r\n
comment11.params=
comment11.target=java.lang.String[][]\ obtenerTuples()
comment11.text=\r\n\ Devuelve\ las\ tuplas\ tranformadas\ en\ matriz\r\n\ @return\ Srting[][]\ matriz\r\n\ \r\n
comment12.params=t
comment12.target=Table\ union(Table)
comment12.text=\r\n\ Set\ operators\r\n\ The\ two\ relations\ involved\ must\ be\ union-compatible\u2014that\ is,\ the\ two\ relations\ must\ have\ the\ same\ set\ of\ attributes.\r\n
comment13.params=t
comment13.target=Table\ intersection(Table)
comment14.params=t
comment14.target=Table\ difference(Table)
comment15.params=
comment15.target=void\ mostrar()
comment15.text=\r\n\ muestra\ los\ datos\ y\ atributos\ de\ la\ clase\ table\r\n
comment16.params=t
comment16.target=boolean\ equals(Table)
comment16.text=\r\n\ Indicates\ whether\ some\ other\ table\ is\ "equal\ to"\ this\ one.\r\n\ @param\ t\ the\ table\ with\ which\ to\ compare.\r\n
comment17.params=o
comment17.target=boolean\ equals(java.lang.Object)
comment18.params=
comment18.target=java.lang.String\ toString()
comment18.text=\r\n\ Devuelve\ un\ string\ con\ la\ tabla\ \r\n\ @return\ String\ s\r\n\ \r\n
comment2.params=tuples1
comment2.target=void\ insert(java.lang.String[][])
comment2.text=\r\n\ Inserts\ the\ specified\ tuples\ to\ this\ table\ \r\n\ @param\ tuples,\ \r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Devuelve\ la\ longitud\ de\ los\ datos\ de\ la\ tabla\r\n\ @return\ int\ \r\n\ \r\n
comment4.params=
comment4.target=java.lang.String[]\ attributes()
comment4.text=\r\n\ Devuelve\ una\ lista\ de\ los\ nombres\ de\ los\ atributos\r\n\ @return\ String[]\r\n\ \r\n
comment5.params=n
comment5.target=java.lang.String[]\ tuple(int)
comment6.params=tuple
comment6.target=boolean\ in(java.lang.String[])
comment6.text=\r\n\ Devuelve\ booleano\ si\ una\ lista\ de\ datos\ esta\ dentro\ de\ nuestros\ datos\r\n\ @return\ boolean\ \r\n\ @param\ String\ tuple[]\ array\ que\ contiene\ una\ lista\ de\ datos\r\n
comment7.params=attributes1
comment7.target=Table\ proyection(java.lang.String[])
comment7.text=\r\n\ Devuelve\ la\ tabla\ con\ unos\ atributos\ especificados\r\n\ @return\ Table\ proyeccion\ \r\n\ @param\ String\ attributes1[]\ lista\ de\ strings\ con\ los\ atributos\ \r\n
comment8.params=attribute\ value
comment8.target=Table\ selection(java.lang.String,\ java.lang.String)
comment8.text=\r\n\ Devuelve\ la\ tabla\ con\ unos\ atributos\ especificados\ y\ datos\ especificados\r\n\ @return\ Table\ seleccion\r\n\ @param\ String\ attribute\ string\ con\ el\ atributo\ y\ String\ value\ con\ el\ valor\r\n
comment9.params=t
comment9.target=Table\ naturalJoin(Table)
numComments=19
